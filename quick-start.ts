#!/usr/bin/env tsx

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Å SurrealDB ORM
 *
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ ORM:
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 * - –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
 * - CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏
 * - –†–∞–±–æ—Ç–∞ —Å –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º–∏
 */

import { SurrealRPC } from "./rpc.js";
import { createORM } from "./orm.js";
import type { DatabaseSchema } from "./orm.js";
import type { SurrealENV } from "./types.js";

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É –¥–ª—è –±–ª–æ–≥–∞
const blogSchema: DatabaseSchema = {
	users: {
		comment: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–ª–æ–≥–∞",
		fields: {
			username: {
				type: "string",
				required: true,
				constraints: {
					"string::len": [3, 20],
				},
				comment: "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			},
			email: {
				type: "string",
				required: true,
				constraints: {
					"string::is::email": true,
				},
				comment: "Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
			},
			bio: {
				type: "string",
				required: false,
				comment: "–ö—Ä–∞—Ç–∫–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è",
			},
		},
		indexes: [
			{
				name: "idx_username",
				fields: ["username"],
				unique: true,
			},
			{
				name: "idx_email",
				fields: ["email"],
				unique: true,
			},
		],
	},

	posts: {
		comment: "–ü–æ—Å—Ç—ã –±–ª–æ–≥–∞",
		fields: {
			title: {
				type: "string",
				required: true,
				constraints: {
					"string::len": [1, 200],
				},
				comment: "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ—Å—Ç–∞",
			},
			content: {
				type: "string",
				required: true,
				comment: "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—Ç–∞",
			},
			author: {
				type: "record",
				required: true,
				references: "users",
				comment: "–ê–≤—Ç–æ—Ä –ø–æ—Å—Ç–∞",
			},
			published: {
				type: "bool",
				required: true,
				default: false,
				comment: "–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ª–∏ –ø–æ—Å—Ç",
			},
		},
		indexes: [
			{
				name: "idx_author",
				fields: ["author"],
			},
			{
				name: "idx_published",
				fields: ["published"],
			},
		],
		constraints: [
			{
				name: "check_content_length",
				expression: "string::len($value.content) > 10",
			},
		],
	},

	comments: {
		comment: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ—Å—Ç–∞–º",
		fields: {
			content: {
				type: "string",
				required: true,
				comment: "–¢–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
			},
			post: {
				type: "record",
				required: true,
				references: "posts",
				comment: "–ü–æ—Å—Ç, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
			},
			author: {
				type: "record",
				required: true,
				references: "users",
				comment: "–ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
			},
		},
		indexes: [
			{
				name: "idx_post",
				fields: ["post"],
			},
			{
				name: "idx_author",
				fields: ["author"],
			},
		],
	},
};

async function quickStart() {
	console.log("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ SurrealDB ORM...");
	console.log("üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:", process.cwd());

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	const env: SurrealENV = {
		rpc: "ws://localhost:3603/rpc",
		namespace: "blog",
		database: "blog_db",
		user: "root",
		pass: "q43uxrUDbNUcIxp5WhUmdCLuwRzBZ807",
	};

	console.log("üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:", env);

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	const future = {
		run: (fn: any, options: any) => {
			if (options?.type === "interval") {
				return setInterval(fn, 5000);
			}
			return setTimeout(fn, 0);
		},
		clear: (type: any, key: any) => {
			if (type === "interval") {
				clearInterval(key);
			} else {
				clearTimeout(key);
			}
		},
		delay: 0,
		timers: new Map(),
		intervals: new Map(),
		get: (type: any, key: any) => null,
		reset: () => {},
	} as any;

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
	const rpc = new SurrealRPC({
		env,
		future,
		logger: {
			print: (caller: any, message: any) => console.log(`[${caller}]`, message),
			debug: (caller: any, message: any) => console.log(`[DEBUG] ${caller}`, message),
			info: (caller: any, message: any) => console.log(`[INFO] ${caller}`, message),
			warn: (caller: any, message: any) => console.log(`[WARN] ${caller}`, message),
			error: (caller: any, message: any) => console.log(`[ERROR] ${caller}`, message),
			good: (caller: any, message: any) => console.log(`[SUCCESS] ${caller}`, message),
			log: (caller: any, message: any) => console.log(`[LOG] ${caller}`, message),
			throw: (caller: any, message: any) => {
				throw new Error(`[${caller}] ${message}`);
			},
			load: (caller: any, message: any) => console.log(`[LOAD] ${caller}`, message),
			redirect: () => {},
			balance: () => {},
		} as any,
	});

	try {
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
		await rpc.open();
		console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SurrealDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

		// –°–æ–∑–¥–∞–µ–º ORM
		const orm = createORM(rpc, blogSchema);
		console.log("‚úÖ ORM —Å–æ–∑–¥–∞–Ω");

		// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å—Ö–µ–º—É
		await orm.sync();
		console.log("‚úÖ –°—Ö–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");

		// –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
		const usersTable = orm.table("users");

		// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await usersTable.createRecord({
			username: "john_doe",
			email: "john@example.com",
			bio: "–õ—é–±–∏—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∫–æ—Ñ–µ",
		});
		console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:", user);

		// –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ—Å—Ç–∞–º–∏
		const postsTable = orm.table("posts");

		// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
		const post = await postsTable.createRecord({
			title: "–ú–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç",
			content: "–≠—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç –≤ –±–ª–æ–≥–µ. –ó–¥–µ—Å—å —è —Ä–∞—Å—Å–∫–∞–∂—É –æ —Å–≤–æ–∏—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è—Ö –æ—Ç –∏–∑—É—á–µ–Ω–∏—è SurrealDB –∏ —Å–æ–∑–¥–∞–Ω–∏—è ORM.",
			author: user.id,
			published: true,
		});
		console.log("‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω:", post);

		// –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏
		const commentsTable = orm.table("comments");

		// –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
		const comment = await commentsTable.createRecord({
			content: "–û—Ç–ª–∏—á–Ω—ã–π –ø–æ—Å—Ç! –û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ —É–∑–Ω–∞—Ç—å –æ SurrealDB.",
			post: post.id,
			author: user.id,
		});
		console.log("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω:", comment);

		// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
		const allUsers = await usersTable.findAll();
		const allPosts = await postsTable.findAll();
		const allComments = await commentsTable.findAll();

		console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
		console.log(`üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}`);
		console.log(`üìù –ü–æ—Å—Ç–æ–≤: ${allPosts.length}`);
		console.log(`üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${allComments.length}`);

		// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
		const foundUser = await usersTable.findById(user.id);
		console.log("\nüîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:", foundUser?.username);

		// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
		const updatedPost = await postsTable.updateRecord(post.id, {
			title: "–ú–æ–π –ø–µ—Ä–≤—ã–π –ø–æ—Å—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π)",
		});
		console.log("‚úèÔ∏è –ü–æ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω:", updatedPost?.title);

		console.log("\nüéâ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!");
	} catch (error) {
		console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞:", error);
	} finally {
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		try {
			(rpc as any).ws?.close();
		} catch (e) {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
		}
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
quickStart().catch(console.error);

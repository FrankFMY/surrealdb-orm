import { SurrealRPC } from './rpc';
import { createORM } from './orm';
import { schema } from './examples';
import type { SurrealENV } from './types';

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç ORM
 */
export async function testORM() {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SurrealDB
	const env: SurrealENV = {
		rpc: 'ws://localhost:3603/rpc',
		namespace: 'test',
		database: 'test_db',
		user: 'root',
		pass: 'q43uxrUDbNUcIxp5WhUmdCLuwRzBZ807',
	};

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –º–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
	const future = {
		run: (
			fn: () => void | Promise<void>,
			options: {
				type: 'interval' | 'timeout';
				key: string;
				delay?: number;
			}
		) => {
			if (options.type === 'interval') {
				setInterval(fn, options.delay || 5000);
			} else {
				setTimeout(fn, options.delay || 0);
			}
		},
		clear: (type: 'interval' | 'timeout', key: string) => {
			if (type === 'interval') {
				clearInterval(parseInt(key));
			} else {
				clearTimeout(parseInt(key));
			}
		},
	};

	// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
	const rpc = new SurrealRPC({
		env,
		future,
		logger: {
			debug: (
				caller: string | { module?: string; method?: string },
				message: unknown
			) => {
				const module =
					typeof caller === 'string' ? caller : (
						caller?.module || 'unknown'
					);
				const method =
					typeof caller === 'string' ? '' : caller?.method || '';
				console.log(
					`[DEBUG] ${module}${method ? `:${method}` : ''}`,
					message
				);
			},
			info: (
				caller: string | { module?: string; method?: string },
				message: unknown
			) => {
				const module =
					typeof caller === 'string' ? caller : (
						caller?.module || 'unknown'
					);
				const method =
					typeof caller === 'string' ? '' : caller?.method || '';
				console.log(
					`[INFO] ${module}${method ? `:${method}` : ''}`,
					message
				);
			},
			warn: (
				caller: string | { module?: string; method?: string },
				message: unknown
			) => {
				const module =
					typeof caller === 'string' ? caller : (
						caller?.module || 'unknown'
					);
				const method =
					typeof caller === 'string' ? '' : caller?.method || '';
				console.log(
					`[WARN] ${module}${method ? `:${method}` : ''}`,
					message
				);
			},
			error: (
				caller: string | { module?: string; method?: string },
				message: unknown
			) => {
				const module =
					typeof caller === 'string' ? caller : (
						caller?.module || 'unknown'
					);
				const method =
					typeof caller === 'string' ? '' : caller?.method || '';
				console.log(
					`[ERROR] ${module}${method ? `:${method}` : ''}`,
					message
				);
			},
			good: (
				caller: string | { module?: string; method?: string },
				message: unknown
			) => {
				const module =
					typeof caller === 'string' ? caller : (
						caller?.module || 'unknown'
					);
				const method =
					typeof caller === 'string' ? '' : caller?.method || '';
				console.log(
					`[SUCCESS] ${module}${method ? `:${method}` : ''}`,
					message
				);
			},
		},
	});

	try {
		// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ
		await rpc.open();
		console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SurrealDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

		// –°–æ–∑–¥–∞–µ–º ORM
		const orm = createORM(rpc, schema);
		console.log('‚úÖ ORM —Å–æ–∑–¥–∞–Ω');

		// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º/–º–∏–≥—Ä–∏—Ä—É–µ–º —Å—Ö–µ–º—É
		await orm.migrateMissing();
		console.log('‚úÖ –°—Ö–µ–º–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

		// –†–∞–±–æ—Ç–∞–µ–º —Å —Ç–∞–±–ª–∏—Ü–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
		const usersTable = orm.table('users');

		// –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const user = await usersTable.createRecord({
			email: 'test@example.com',
			nickname: 'test_user',
			age: 25,
			isActive: true,
			profile: {
				bio: 'Test user',
				location: 'Test City',
			},
		});
		console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:', user);

		// –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const foundUser = await usersTable.findById(user.id);
		console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', foundUser);

		// –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		const updatedUser = await usersTable.updateRecord(user.id, {
			age: 26,
			profile: {
				...(user.profile as Record<string, unknown>),
				bio: 'Updated test user',
			},
		});
		console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedUser);

		// MERGE —á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
		const mergedUser = await usersTable.mergeRecord(user.id, { age: 27 });
		console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å merge:', mergedUser);

		// UPSERT (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ id)
		const upsertedUser = await usersTable.upsertRecord(user.id, {
			isActive: true,
		});
		console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å upsert:', upsertedUser);

		// –†–∞–±–æ—Ç–∞–µ–º —Å –ø–æ—Å—Ç–∞–º–∏
		const postsTable = orm.table('posts');

		// –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
		const post = await postsTable.createRecord({
			title: 'Test Post',
			content:
				'This is a test post with enough content to pass validation.',
			author: user.id,
			tags: ['test', 'orm', 'surrealdb'],
			published: true,
		});
		console.log('‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω:', post);

		// –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: —Å–æ–∑–¥–∞–¥–∏–º –∏ —É–¥–∞–ª–∏–º –≤ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏
		await rpc.withTransaction(async () => {
			const p2 = await postsTable.createRecord({
				title: 'Tx Post',
				content: 'Transactional content long enough...',
				author: user.id,
				published: false,
			});
			await postsTable.deleteRecord(p2.id);
		});

		// Live builder (–±—ã—Å—Ç—Ä—ã–π –ø—Ä–∏–º–µ—Ä)
		const live = await orm.live('posts', {
			where: 'published = true',
			onEvent: (evt) => console.log('üîî live:', evt.action),
		});
		await rpc.kill(live.id);
		live.unsubscribe();

		// –ü—Ä–∏–º–µ—Ä —Å–≤—è–∑–∏: –ø–æ—Å—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Ä–µ–±—Ä–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
		await orm.relate('wrote', user.id, post.id, {
			at: new Date().toISOString(),
		});

		// –£–¥–∞–ª–∏–º —Å–≤—è–∑—å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å unrelate
		await orm.unrelate('wrote', user.id, post.id);

		// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã
		const allPosts = await postsTable.select({
			where: 'published = $pub',
			vars: { pub: true },
			orderBy: 'title',
			orderDir: 'ASC',
			limit: 10,
		});
		console.log('‚úÖ –í—Å–µ –ø–æ—Å—Ç—ã:', allPosts);

		// –ü–æ–¥—Å—á—ë—Ç –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏—è
		const totalPublished = await postsTable.count('published = $pub', {
			pub: true,
		});
		console.log('‚úÖ –ö–æ–ª-–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö:', totalPublished);
		const page1 = await postsTable.page({
			where: 'published = $pub',
			vars: { pub: true },
			orderBy: 'title',
			orderDir: 'ASC',
			page: 0,
			pageSize: 5,
		});
		console.log(
			'‚úÖ –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1:',
			page1.items.length,
			'/',
			page1.total
		);

		// –û—á–∏—Å—Ç–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ —Ç–µ—Å—Ç–∞ (–ø—Ä–∏–º–µ—Ä deleteWhere)
		await postsTable.deleteWhere('author = $author', { author: user.id });

		console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ ORM:', error);
	} finally {
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
		try {
			(rpc as unknown as { ws?: { close: () => void } }).ws?.close();
		} catch (e) {
			// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
		}
	}
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (typeof require !== 'undefined' && require.main === module) {
	testORM().catch(console.error);
}
